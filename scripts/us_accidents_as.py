{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9333275,"sourceType":"datasetVersion","datasetId":5655368}],"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:18.914014Z\",\"iopub.execute_input\":\"2024-10-13T15:02:18.914476Z\",\"iopub.status.idle\":\"2024-10-13T15:02:18.919956Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:18.914434Z\",\"shell.execute_reply\":\"2024-10-13T15:02:18.918831Z\"}}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:18.927448Z\",\"iopub.execute_input\":\"2024-10-13T15:02:18.927967Z\",\"iopub.status.idle\":\"2024-10-13T15:02:25.277805Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:18.927868Z\",\"shell.execute_reply\":\"2024-10-13T15:02:25.276526Z\"}}\ndf = pd.read_csv(\"/kaggle/input/accidents/US_Accidents_March23_sampled_500k.csv\")\ndf.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:25.279772Z\",\"iopub.execute_input\":\"2024-10-13T15:02:25.280158Z\",\"iopub.status.idle\":\"2024-10-13T15:02:26.381473Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:25.280117Z\",\"shell.execute_reply\":\"2024-10-13T15:02:26.380363Z\"}}\ndf.info()\n\n# %% [markdown]\n# **SEVERITY ON TRAFFIC ANALYSIS**\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:26.383005Z\",\"iopub.execute_input\":\"2024-10-13T15:02:26.383410Z\",\"iopub.status.idle\":\"2024-10-13T15:02:26.391263Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:26.383369Z\",\"shell.execute_reply\":\"2024-10-13T15:02:26.389907Z\"}}\ndf.columns\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:26.393821Z\",\"iopub.execute_input\":\"2024-10-13T15:02:26.394199Z\",\"iopub.status.idle\":\"2024-10-13T15:02:26.460865Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:26.394160Z\",\"shell.execute_reply\":\"2024-10-13T15:02:26.459838Z\"}}\ndf_traffic= df[['ID', 'Severity', 'City', 'State', 'Temperature(F)', \n                 'Visibility(mi)', 'Precipitation(in)', 'Weather_Condition', 'Bump', 'Crossing',\n                'Junction', 'Roundabout', 'Traffic_Signal','Sunrise_Sunset' ]]\nprint(df_traffic.shape)\ndf_traffic.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:26.462383Z\",\"iopub.execute_input\":\"2024-10-13T15:02:26.462732Z\",\"iopub.status.idle\":\"2024-10-13T15:02:26.748025Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:26.462694Z\",\"shell.execute_reply\":\"2024-10-13T15:02:26.746765Z\"}}\ndf_traffic.info()\n\n# %% [markdown]\n# DATA CLEANING\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:26.749352Z\",\"iopub.execute_input\":\"2024-10-13T15:02:26.749827Z\",\"iopub.status.idle\":\"2024-10-13T15:02:46.671696Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:26.749770Z\",\"shell.execute_reply\":\"2024-10-13T15:02:46.670393Z\"}}\n!pip install us\nimport us\n\n# Function to convert state code to state name\ndef convert_state_code(code):\n    state = us.states.lookup(code)\n    return state.name if state else 'Unknown'\n\ndf_traffic['State'] = df_traffic['State'].apply(convert_state_code)\ndf_traffic['State'].head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:46.673347Z\",\"iopub.execute_input\":\"2024-10-13T15:02:46.673716Z\",\"iopub.status.idle\":\"2024-10-13T15:02:46.790839Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:46.673674Z\",\"shell.execute_reply\":\"2024-10-13T15:02:46.789743Z\"}}\ndf_traffic.describe()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:46.792491Z\",\"iopub.execute_input\":\"2024-10-13T15:02:46.793004Z\",\"iopub.status.idle\":\"2024-10-13T15:02:47.259272Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:46.792935Z\",\"shell.execute_reply\":\"2024-10-13T15:02:47.258047Z\"}}\ndf_traffic.select_dtypes(include='object').nunique()\n\n# %% [markdown]\n# *from the description, there are potential outliers that should be sorted*\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:47.260622Z\",\"iopub.execute_input\":\"2024-10-13T15:02:47.260960Z\",\"iopub.status.idle\":\"2024-10-13T15:02:48.203311Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:47.260924Z\",\"shell.execute_reply\":\"2024-10-13T15:02:48.202070Z\"}}\ndef boxPlot(column):\n  sns.boxplot(x=df[column], orient='h')\n\n  plt.title(column)\n  plt.xlabel('Frequency')\n  plt.show()\n\ndata = df_traffic.select_dtypes(include = 'number').columns\nfor col in data[1:]:\n  boxPlot(col)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:48.208495Z\",\"iopub.execute_input\":\"2024-10-13T15:02:48.208906Z\",\"iopub.status.idle\":\"2024-10-13T15:02:48.316906Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:48.208862Z\",\"shell.execute_reply\":\"2024-10-13T15:02:48.315819Z\"}}\n# Handling Temperature Outlier\ndf_traffic['Temperature(F)'].sort_values(ascending=False)\nhigh_temp = df_traffic['Temperature(F)'] <=134\nlow_temp = df_traffic['Temperature(F)'] >= -70\nmask_temp = high_temp & low_temp\n\ndf_traffic = df_traffic[mask_temp]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:48.318210Z\",\"iopub.execute_input\":\"2024-10-13T15:02:48.318543Z\",\"iopub.status.idle\":\"2024-10-13T15:02:48.478322Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:48.318507Z\",\"shell.execute_reply\":\"2024-10-13T15:02:48.477191Z\"}}\n# Handling Visibility Outlier\nmask_vi = df_traffic['Visibility(mi)'] < 40\ndf_traffic = df_traffic[mask_vi]\ndf_traffic.describe()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:48.479678Z\",\"iopub.execute_input\":\"2024-10-13T15:02:48.480072Z\",\"iopub.status.idle\":\"2024-10-13T15:02:48.764593Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:48.480029Z\",\"shell.execute_reply\":\"2024-10-13T15:02:48.763474Z\"}}\n# Handling Nan Values\ndf_traffic.isnull().sum()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:48.765908Z\",\"iopub.execute_input\":\"2024-10-13T15:02:48.766408Z\",\"iopub.status.idle\":\"2024-10-13T15:02:49.296400Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:48.766365Z\",\"shell.execute_reply\":\"2024-10-13T15:02:49.295286Z\"}}\ndf_traffic = df_traffic.dropna(subset=['City', 'Weather_Condition', 'Sunrise_Sunset'])\n\ndf_traffic['Precipitation(in)'] = df_traffic['Precipitation(in)'].fillna(df_traffic['Precipitation(in)'].median())\n\ndf_traffic.isnull().sum()\n\n\n# %% [markdown]\n# EDA\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:49.297920Z\",\"iopub.execute_input\":\"2024-10-13T15:02:49.298420Z\",\"iopub.status.idle\":\"2024-10-13T15:02:49.312863Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:49.298345Z\",\"shell.execute_reply\":\"2024-10-13T15:02:49.311667Z\"}}\nclass_counts = df_traffic['Severity'].value_counts()\ntotal_count = len(df_traffic)\npercentage = (class_counts / total_count) * 100\n\nprint(percentage)\n     \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:49.314762Z\",\"iopub.execute_input\":\"2024-10-13T15:02:49.315569Z\",\"iopub.status.idle\":\"2024-10-13T15:02:50.613489Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:49.315524Z\",\"shell.execute_reply\":\"2024-10-13T15:02:50.612141Z\"}}\ndef hist(data, title):\n  figsize = (10,5)\n  plt.hist(data, bins=10, edgecolor='black')\n  plt.title(title)\n  plt.xlabel('Value')\n  plt.ylabel('Frequency')\n  plt.show()\n\ndata = df_traffic.select_dtypes(include='number').columns\n\nfor col in data:\n  hist(data=df_traffic[col], title= f'Distribution of {col}')\n\n# %% [markdown]\n# *It is observed that:\n# \n# * *Majority of the accidents have MODERATE delay impact on Traffic*\n# * *Majority of accidents occured on days with Temperature between 40°F and 100°F, typically during Spring, Summer and Fall*\n# *  *Majority of the accidents occured when there were 0-10miles visibilty*\n# *  *Majority of the accidents occured when there was 0in precipitation which implies that the weather was dry, with no rain, snow, sleet, or any other form of precipitation.*\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:50.615111Z\",\"iopub.execute_input\":\"2024-10-13T15:02:50.615586Z\",\"iopub.status.idle\":\"2024-10-13T15:02:51.425830Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:50.615532Z\",\"shell.execute_reply\":\"2024-10-13T15:02:51.424681Z\"}}\nplt.figure(figsize=(10, 6))\nsns.countplot(x=df_traffic['Sunrise_Sunset'])\nplt.xticks(rotation=45)\nplt.title(f'Distribution of Accidents by Daytime')\n\nplt.show()\n\n# %% [markdown]\n# *More accidents occured during Daytime*\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:51.427444Z\",\"iopub.execute_input\":\"2024-10-13T15:02:51.427902Z\",\"iopub.status.idle\":\"2024-10-13T15:02:51.457954Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:51.427847Z\",\"shell.execute_reply\":\"2024-10-13T15:02:51.456830Z\"}}\ndata = ['Bump', 'Crossing', 'Junction', 'Roundabout', 'Traffic_Signal']\nfor col in data:\n    class_counts = df_traffic[col].value_counts()\n    total_count = len(df_traffic)\n    percentage = (class_counts / total_count) * 100\n\n    print(percentage)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:51.459572Z\",\"iopub.execute_input\":\"2024-10-13T15:02:51.460060Z\",\"iopub.status.idle\":\"2024-10-13T15:02:52.825026Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:51.460004Z\",\"shell.execute_reply\":\"2024-10-13T15:02:52.823817Z\"}}\ndef bar_plot(data, title):\n    plt.figure(figsize=(10, 5))\n    sns.countplot(x=data)\n    plt.title(title)\n    plt.xlabel('Category')\n    plt.ylabel('Frequency')\n    plt.xticks(rotation=45)\n    plt.show()\n\n# List of categorical columns\ndata_columns = ['Bump', 'Crossing', 'Junction', 'Roundabout', 'Traffic_Signal']\n\n# Loop through the columns and plot bar charts\nfor col in data_columns:\n    bar_plot(data=df_traffic[col], title=f'Distribution of {col}')\n\n# %% [markdown]\n# * Over 99% of accidents occur on roads without Road Bumps\n# * About 11% of accidents occur on roads near Pedastrian Crossings\n# * About 7% of accidents occur on roads with a Junction nearby\n# * Almost no accident occur on Roundabouts\n# * About 85% of accidents occur on road where Traffic Signals are absent\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:03:09.298697Z\",\"iopub.execute_input\":\"2024-10-13T15:03:09.299183Z\",\"iopub.status.idle\":\"2024-10-13T15:03:10.404668Z\",\"shell.execute_reply.started\":\"2024-10-13T15:03:09.299136Z\",\"shell.execute_reply\":\"2024-10-13T15:03:10.403326Z\"}}\ndef merge_small_categories(df, column_name, threshold=1000):\n    value_counts = df[column_name].value_counts()\n    to_merge = value_counts[value_counts < threshold].index\n    df[column_name] = df[column_name].replace(to_merge, 'others')\n    \n    return df\n\nmerge_small_categories(df_traffic, 'Weather_Condition', threshold=1000)\nplt.figure(figsize=(10, 6))\nsns.countplot(x=df_traffic['Weather_Condition'])\nplt.xticks(rotation=45)\nplt.title(f'Distribution of Accidents by Weather Condition')\nplt.show()\n\n\n# %% [markdown]\n# *Most accidents have occured when the weather_condotion is 'Fair'*\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:57.203109Z\",\"iopub.status.idle\":\"2024-10-13T15:02:57.203844Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:57.203496Z\",\"shell.execute_reply\":\"2024-10-13T15:02:57.203538Z\"}}\nplt.figure(figsize=(10, 6))\nsns.countplot(x=df_traffic['State'])\nplt.xticks(rotation=45)\nplt.title(f'Distribution of Accidents by State')\nplt.show()\n\n# %% [markdown]\n# *By a large margin, California has the highest occurence of accidents*\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:57.206142Z\",\"iopub.status.idle\":\"2024-10-13T15:02:57.206731Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:57.206427Z\",\"shell.execute_reply\":\"2024-10-13T15:02:57.206459Z\"}}\n# Get the most frequent 20 cities\nmost_frequent_cities = df_traffic['City'].value_counts().head(20).index\ndf_most_frequent = df_traffic[df_traffic['City'].isin(most_frequent_cities)]\n\nplt.figure(figsize=(10, 6))\nsns.countplot(data=df_most_frequent, x='City', order=most_frequent_cities)\nplt.xticks(rotation=45)\nplt.title('Distribution of Accident by Most Frequent Cities')\nplt.show()\n\n# %% [markdown]\n# *Although California state has the highest accident occurences, more analysis has shown that Miami in Florida and Houston in Texas has more accident occurences than cities in California*\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:57.209143Z\",\"iopub.status.idle\":\"2024-10-13T15:02:57.209722Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:57.209423Z\",\"shell.execute_reply\":\"2024-10-13T15:02:57.209453Z\"}}\ndf_severe = df_traffic[df_traffic['Severity'] == 4]\nsevere_weather_condition = df_severe['Weather_Condition'].value_counts().reset_index()\nsevere_weather_condition.columns = ['Weather_Condition', 'Count']\n\n# Plotting the severe weather conditions\nplt.figure(figsize=(10, 6))\nsns.barplot(data=severe_weather_condition, x='Weather_Condition', y='Count')\nplt.xticks(rotation=45)\nplt.title('Distribution of Weather Conditions for Severity 4 Accidents')\nplt.show()\n\n\n# %% [markdown]\n# *Most Accidents with severe effects on traffic occur when the weather condition is 'Fair'*\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:57.212809Z\",\"iopub.status.idle\":\"2024-10-13T15:02:57.213692Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:57.213367Z\",\"shell.execute_reply\":\"2024-10-13T15:02:57.213401Z\"}}\ntraffic_signal_severity = df_traffic[['Traffic_Signal', 'Severity']].value_counts().sort_values(ascending=False).head(20).reset_index()\ntraffic_signal_severity.columns = ['Traffic_Signal', 'Severity', 'Count']\n\nplt.figure(figsize=(10, 6))\nsns.barplot(data=traffic_signal_severity, x='Traffic_Signal', y='Count', hue='Severity')\n\nplt.title('Traffic Signal vs Severity')\nplt.ylabel('Count')\nplt.xlabel('Traffic Signal')\nplt.show()\n\n# %% [markdown]\n# *This shows the spread of severity in the presence and absence of Traffic Signal*\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-13T15:02:57.216003Z\",\"iopub.status.idle\":\"2024-10-13T15:02:57.216575Z\",\"shell.execute_reply.started\":\"2024-10-13T15:02:57.216274Z\",\"shell.execute_reply\":\"2024-10-13T15:02:57.216304Z\"}}\ntraffic_signal_severity = df_traffic[['Crossing', 'Severity']].value_counts().sort_values(ascending=False).head(20).reset_index()\ntraffic_signal_severity.columns = ['Crossing', 'Severity', 'Count']\n\nplt.figure(figsize=(10, 6))\nsns.barplot(data=traffic_signal_severity, x='Crossing', y='Count', hue='Severity')\n\nplt.title('Pedastrian Crossing vs Severity')\nplt.ylabel('Count')\nplt.xlabel('Pedastrian Crossing')\nplt.show()\n\n# %% [markdown]\n# *This shows the spread of severity in the presence or absence of Pedastrian Crossings.*\n\n# %% [markdown]\n# From the above analysis, it can be derived that many accidents occur during daytime when visibility is low and precipitation does not neccesarily increase the chance of accident occurence as most accidents occur during fair and clear weather. Factors such as presence of roundabouts, traffic signals, road bumps significantly reduce the chance of accident occurence. Finally, majority of the of accidents cause moderate Traffic(ie not too long delay)","metadata":{"_uuid":"50dc8213-0e9c-4977-8276-9aa806c0820d","_cell_guid":"c943ab00-316c-4cd0-ae38-f286419a9d9a","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}